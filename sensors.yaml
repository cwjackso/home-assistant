  - platform: darksky
    api_key: !secret dark_sky
    monitored_conditions:
       - summary
       - daily_summary
       - hourly_summary
       - temperature_high
#google wifi
  - platform: google_wifi

#bins
#  - platform: rest
#    resource: !secret bins_api
#    method: GET
#    name: Bin days
#    value_template: 'Next black bin collection will be on {{ value_json.black }}, brown bin will be {{ value_json.brown }} and blue bin will be {{ value_json.brown }}'
#    json_attributes:
#    - black
#    - brown
#    - blue

#distance matrix
  - platform: google_travel_time
    api_key: !secret google_distance_matrix_key
    origin: S72db
    destination: S14rg
    name: Time to work

  - platform: google_travel_time
    api_key: !secret google_distance_matrix_key
    origin: S72db
    destination: Kirk Balk academy
    name: Time to school


# busses
  - platform: uk_transport
    app_id: !secret transport_id
    app_key: !secret transport_key
    queries:
      - mode: bus
        origin: "370021108"
        destination: "Sheffield"

#template sensors
  - platform: template
    sensors:
      next_bus_route:
        friendly_name: 'Next bus route'
        value_template: '{{states.sensor.next_bus_to_sheffield.attributes.next_buses[0].route}}'
      next_bus_direction:
        friendly_name: 'Next bus direction'
        value_template: '{{states.sensor.next_bus_to_sheffield.attributes.next_buses[0].direction}}'
      next_bus_scheduled:
        friendly_name: 'Next bus scheduled  / estimated'
        value_template: '{{states.sensor.next_bus_to_sheffield.attributes.next_buses[0].scheduled}} / {{states.sensor.next_bus_to_sheffield.attributes.next_buses[0].estimated}}'
      black_bin_date:
        friendly_name: 'Next black bin collection'
        value_template: "{{states.sensor.bin_days.attributes['black']}}"
      brown_bin_date:
        friendly_name: 'Next brown collection'
        value_template: "{{states.sensor.bin_days.attributes['brown']}}"        
      blue_bin_date:
        friendly_name: 'Next blue bin collection'
        value_template: "{{states.sensor.bin_days.attributes['blue']}}"
#      daily_summary:
#        friendly_name: "Daily Summary"
#        value_template: >
#          Good morning!
#          {% if now().isoweekday() == 4%}
#          It will take {{ states.sensor.time_to_school.attributes.duration_in_traffic }} to get to school and {{ states.sensor.time_to_work.attributes.duration_in_traffic }} to get to work.
#          {% elif now().isoweekday() in (1,2,3,4,5) %}
#          It will take {{ states.sensor.time_to_work.attributes.duration_in_traffic }} to get to work.
#          {% else %}
#          Current travel time to the city center is around {{ states.sensor.time_to_work.attributes.duration_in_traffic }}.
#          {% endif %}
#          {% if now().isoweekday() == 1%}
#          This weeks forecast is {{ states.sensor.dark_sky_daily_summary }}
#          today it will be {{ states.sensor.dark_sky_hourly_summary.state }}
#          {% else %}
#          Todays forecast is {{ states.sensor.dark_sky_hourly_summary.state }} 
#          {% endif %}
#          Have a great day.

#with a high of {{ states.sensor.dark_sky_daytime_high_temperature.state }}Â°C.
# {% if(as_timestamp(strptime(states.sensor.bin_days.attributes.black, "%d %b %Y")) - as_timestamp(now())) < (60 * 60 * 36) %}
# The black bin will be collected tomorrow.
# {% endif %}
# {% if(as_timestamp(strptime(states.sensor.bin_days.attributes.brown, "%d %b %Y")) - as_timestamp(now())) < (60 * 60 * 36) %}
# The brown bin will be collected tomorrow.
# {% endif %}
# {% if(as_timestamp(strptime(states.sensor.bin_days.attributes.blue, "%d %b %Y")) - as_timestamp(now())) < (60 * 60 * 36) %}
# The blue bin will be collected tomorrow.
# {% endif %}     